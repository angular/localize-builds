import { parseTranslation, translate as _translate } from './utils/translations';
/**
 * Load translations for `$localize`.
 *
 * The given `translations` are processed and added to a lookup based on their translation key.
 * A new translation will overwrite a previous translation if it has the same key.
 *
 * @publicApi
 */
export function loadTranslations(translations) {
    // Ensure the translate function exists
    if (!$localize.translate) {
        $localize.translate = translate;
    }
    if (!$localize.TRANSLATIONS) {
        $localize.TRANSLATIONS = {};
    }
    Object.keys(translations).forEach(function (key) {
        $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);
    });
}
/**
 * Remove all translations for `$localize`.
 *
 * @publicApi
 */
export function clearTranslations() {
    $localize.TRANSLATIONS = {};
}
/**
 * Translate the text of the given message, using the loaded translations.
 *
 * This function may reorder (or remove) substitutions as indicated in the matching translation.
 */
export function translate(messageParts, substitutions) {
    return _translate($localize.TRANSLATIONS, messageParts, substitutions);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbG9jYWxpemUvc3JjL3RyYW5zbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQW1ELGdCQUFnQixFQUFFLFNBQVMsSUFBSSxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQVVqSTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFDLFlBQW1EO0lBQ2xGLHVDQUF1QztJQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtRQUN4QixTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztLQUNqQztJQUNELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1FBQzNCLFNBQVMsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0tBQzdCO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO1FBQ25DLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsU0FBUyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUFDLFlBQWtDLEVBQUUsYUFBNkI7SUFFekYsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDekUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7TG9jYWxpemVGbn0gZnJvbSAnLi9sb2NhbGl6ZSc7XG5pbXBvcnQge1BhcnNlZFRyYW5zbGF0aW9uLCBUYXJnZXRNZXNzYWdlLCBUcmFuc2xhdGlvbktleSwgcGFyc2VUcmFuc2xhdGlvbiwgdHJhbnNsYXRlIGFzIF90cmFuc2xhdGV9IGZyb20gJy4vdXRpbHMvdHJhbnNsYXRpb25zJztcblxuLyoqXG4gKiBXZSBhdWdtZW50IHRoZSBgJGxvY2FsaXplYCBvYmplY3QgdG8gYWxzbyBzdG9yZSB0aGUgdHJhbnNsYXRpb25zLlxuICpcbiAqIE5vdGUgdGhhdCBiZWNhdXNlIHRoZSBUUkFOU0xBVElPTlMgYXJlIGF0dGFjaGVkIHRvIGEgZ2xvYmFsIG9iamVjdCwgdGhleSB3aWxsIGJlIHNoYXJlZCBiZXR3ZWVuXG4gKiBhbGwgYXBwbGljYXRpb25zIHRoYXQgYXJlIHJ1bm5pbmcgaW4gYSBzaW5nbGUgcGFnZSBvZiB0aGUgYnJvd3Nlci5cbiAqL1xuZGVjbGFyZSBjb25zdCAkbG9jYWxpemU6IExvY2FsaXplRm4me1RSQU5TTEFUSU9OUzogUmVjb3JkPHN0cmluZywgUGFyc2VkVHJhbnNsYXRpb24+fTtcblxuLyoqXG4gKiBMb2FkIHRyYW5zbGF0aW9ucyBmb3IgYCRsb2NhbGl6ZWAuXG4gKlxuICogVGhlIGdpdmVuIGB0cmFuc2xhdGlvbnNgIGFyZSBwcm9jZXNzZWQgYW5kIGFkZGVkIHRvIGEgbG9va3VwIGJhc2VkIG9uIHRoZWlyIHRyYW5zbGF0aW9uIGtleS5cbiAqIEEgbmV3IHRyYW5zbGF0aW9uIHdpbGwgb3ZlcndyaXRlIGEgcHJldmlvdXMgdHJhbnNsYXRpb24gaWYgaXQgaGFzIHRoZSBzYW1lIGtleS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkVHJhbnNsYXRpb25zKHRyYW5zbGF0aW9uczogUmVjb3JkPFRyYW5zbGF0aW9uS2V5LCBUYXJnZXRNZXNzYWdlPikge1xuICAvLyBFbnN1cmUgdGhlIHRyYW5zbGF0ZSBmdW5jdGlvbiBleGlzdHNcbiAgaWYgKCEkbG9jYWxpemUudHJhbnNsYXRlKSB7XG4gICAgJGxvY2FsaXplLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAoISRsb2NhbGl6ZS5UUkFOU0xBVElPTlMpIHtcbiAgICAkbG9jYWxpemUuVFJBTlNMQVRJT05TID0ge307XG4gIH1cbiAgT2JqZWN0LmtleXModHJhbnNsYXRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgJGxvY2FsaXplLlRSQU5TTEFUSU9OU1trZXldID0gcGFyc2VUcmFuc2xhdGlvbih0cmFuc2xhdGlvbnNba2V5XSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhbGwgdHJhbnNsYXRpb25zIGZvciBgJGxvY2FsaXplYC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclRyYW5zbGF0aW9ucygpIHtcbiAgJGxvY2FsaXplLlRSQU5TTEFUSU9OUyA9IHt9O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSB0aGUgdGV4dCBvZiB0aGUgZ2l2ZW4gbWVzc2FnZSwgdXNpbmcgdGhlIGxvYWRlZCB0cmFuc2xhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBtYXkgcmVvcmRlciAob3IgcmVtb3ZlKSBzdWJzdGl0dXRpb25zIGFzIGluZGljYXRlZCBpbiB0aGUgbWF0Y2hpbmcgdHJhbnNsYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUobWVzc2FnZVBhcnRzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgc3Vic3RpdHV0aW9uczogcmVhZG9ubHkgYW55W10pOlxuICAgIFtUZW1wbGF0ZVN0cmluZ3NBcnJheSwgcmVhZG9ubHkgYW55W11dIHtcbiAgcmV0dXJuIF90cmFuc2xhdGUoJGxvY2FsaXplLlRSQU5TTEFUSU9OUywgbWVzc2FnZVBhcnRzLCBzdWJzdGl0dXRpb25zKTtcbn1cbiJdfQ==