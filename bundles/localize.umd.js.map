{"version":3,"file":"localize.umd.js","sources":["../../../../../packages/localize/src/utils/constants.ts","../../../../../packages/localize/src/utils/messages.ts","../../../../../packages/localize/src/utils/translations.ts","../../../../../packages/localize/src/translate.ts","../../../../../packages/localize/localize.ts","../../../../../packages/localize/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The character used to mark the start and end of a placeholder name in a `$localize` tagged\n * string.\n *\n * For example:\n *\n * ```\n * $localize`Hello, ${title}:title:!`;\n * ```\n */\nexport const PLACEHOLDER_NAME_MARKER = ':';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PLACEHOLDER_NAME_MARKER} from './constants';\nimport {TranslationKey} from './translations';\n\n/**\n * A string containing a translation source message.\n *\n * I.E. the message that indicates what will be translated from.\n *\n * Uses `{$placeholder-name}` to indicate a placeholder.\n */\nexport type SourceMessage = string;\n\n/**\n * Information parsed from a `$localize` tagged string that is used to translate it.\n *\n * For example:\n *\n * ```\n * const name = 'Jo Bloggs';\n * $localize`Hello ${name}:title!`;\n * ```\n *\n * May be parsed into:\n *\n * ```\n * {\n *   translationKey: 'Hello {$title}!',\n *   substitutions: { title: 'Jo Bloggs' },\n * }\n * ```\n */\nexport interface ParsedMessage {\n  /**\n   * The key used to look up the appropriate translation target.\n   */\n  translationKey: TranslationKey;\n  /**\n   * A mapping of placeholder names to substitution values.\n   */\n  substitutions: Record<string, any>;\n}\n\n/**\n * Parse a `$localize` tagged string into a structure that can be used for translation.\n *\n * See `ParsedMessage` for an example.\n */\nexport function parseMessage(\n    messageParts: TemplateStringsArray, expressions: readonly any[]): ParsedMessage {\n  const replacements: {[placeholderName: string]: any} = {};\n  let translationKey = messageParts[0];\n  for (let i = 1; i < messageParts.length; i++) {\n    const messagePart = messageParts[i];\n    const expression = expressions[i - 1];\n    // There is a problem with synthesizing template literals in TS.\n    // It is not possible to provide raw values for the `messageParts` and TS is not able to compute\n    // them since this requires access to the string in its original (non-existent) source code.\n    // Therefore we fall back on the non-raw version if the raw string is empty.\n    // This should be OK because synthesized nodes only come from the template compiler and they\n    // will always contain placeholder name information.\n    // So there will be no escaped placeholder marker character (`:`) directly after a substitution.\n    if ((messageParts.raw[i] || messagePart).charAt(0) === PLACEHOLDER_NAME_MARKER) {\n      const endOfPlaceholderName = messagePart.indexOf(PLACEHOLDER_NAME_MARKER, 1);\n      const placeholderName = messagePart.substring(1, endOfPlaceholderName);\n      translationKey += `{$${placeholderName}}${messagePart.substring(endOfPlaceholderName + 1)}`;\n      replacements[placeholderName] = expression;\n    } else {\n      const placeholderName = `ph_${i}`;\n      translationKey += `{$${placeholderName}}${messagePart}`;\n      replacements[placeholderName] = expression;\n    }\n  }\n  return {translationKey, substitutions: replacements};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PLACEHOLDER_NAME_MARKER} from './constants';\nimport {SourceMessage, parseMessage} from './messages';\n\n/**\n * A key used to lookup a `TargetMessage` in a hash map.\n */\nexport type TranslationKey = SourceMessage;\n\n/**\n * A string containing a translation target message.\n *\n * I.E. the message that indicates what will be translated to.\n *\n * Uses `{$placeholder-name}` to indicate a placeholder.\n */\nexport type TargetMessage = string;\n\n/**\n * A translation message that has been processed to extract the message parts and placeholders.\n */\nexport interface ParsedTranslation {\n  messageParts: TemplateStringsArray;\n  placeholderNames: string[];\n}\n\n/**\n * The internal structure used by the runtime localization to translate messages.\n */\nexport type ParsedTranslations = Record<TranslationKey, ParsedTranslation>;\n\n\n/**\n * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\n * `substitutions`) using the given `translations`.\n *\n * The tagged-string is parsed to extract its `translationKey` which is used to find an appropriate\n * `ParsedTranslation`.\n *\n * If one is found then it is used to translate the message into a new set of `messageParts` and\n * `substitutions`.\n * The translation may reorder (or remove) substitutions as appropriate.\n *\n * If no translation matches then the original `messageParts` and `substitutions` are returned\n */\nexport function translate(\n    translations: Record<string, ParsedTranslation>, messageParts: TemplateStringsArray,\n    substitutions: readonly any[]): [TemplateStringsArray, readonly any[]] {\n  const message = parseMessage(messageParts, substitutions);\n  const translation = translations[message.translationKey];\n  if (translation !== undefined) {\n    return [\n      translation.messageParts,\n      translation.placeholderNames.map(placeholder => message.substitutions[placeholder])\n    ];\n  } else {\n    return [messageParts, substitutions];\n  }\n}\n\n/**\n * Parse the `messageParts` and `placeholderNames` out of a target `message`.\n *\n * Used by `loadTranslations()` to convert target message strings into a structure that is more\n * appropriate for doing translation.\n *\n * @param message the message to be parsed.\n */\nexport function parseTranslation(message: TargetMessage): ParsedTranslation {\n  const parts = message.split(/{\\$([^}]*)}/);\n  const messageParts = [parts[0]];\n  const placeholderNames: string[] = [];\n  for (let i = 1; i < parts.length - 1; i += 2) {\n    placeholderNames.push(parts[i]);\n    messageParts.push(`${parts[i + 1]}`);\n  }\n  const rawMessageParts =\n      messageParts.map(part => part.charAt(0) === PLACEHOLDER_NAME_MARKER ? '\\\\' + part : part);\n  return {messageParts: makeTemplateObject(messageParts, rawMessageParts), placeholderNames};\n}\n\n/**\n * Create the specialized array that is passed to tagged-string tag functions.\n *\n * @param cooked The message parts with their escape codes processed.\n * @param raw The message parts with their escaped codes as-is.\n */\nexport function makeTemplateObject(cooked: string[], raw: string[]): TemplateStringsArray {\n  Object.defineProperty(cooked, 'raw', {value: raw});\n  return cooked as any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {LocalizeFn} from './localize';\nimport {ParsedTranslation, TargetMessage, TranslationKey, parseTranslation, translate as _translate} from './utils/translations';\n\n/**\n * We augment the `$localize` object to also store the translations.\n *\n * Note that because the TRANSLATIONS are attached to a global object, they will be shared between\n * all applications that are running in a single page of the browser.\n */\ndeclare const $localize: LocalizeFn&{TRANSLATIONS: Record<string, ParsedTranslation>};\n\n/**\n * Load translations for `$localize`.\n *\n * The given `translations` are processed and added to a lookup based on their translation key.\n * A new translation will overwrite a previous translation if it has the same key.\n *\n * @publicApi\n */\nexport function loadTranslations(translations: Record<TranslationKey, TargetMessage>) {\n  // Ensure the translate function exists\n  if (!$localize.translate) {\n    $localize.translate = translate;\n  }\n  if (!$localize.TRANSLATIONS) {\n    $localize.TRANSLATIONS = {};\n  }\n  Object.keys(translations).forEach(key => {\n    $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\n  });\n}\n\n/**\n * Remove all translations for `$localize`.\n *\n * @publicApi\n */\nexport function clearTranslations() {\n  $localize.TRANSLATIONS = {};\n}\n\n/**\n * Translate the text of the given message, using the loaded translations.\n *\n * This function may reorder (or remove) substitutions as indicated in the matching translation.\n */\nexport function translate(messageParts: TemplateStringsArray, substitutions: readonly any[]):\n    [TemplateStringsArray, readonly any[]] {\n  return _translate($localize.TRANSLATIONS, messageParts, substitutions);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file contains the public API of the `@angular/localize` entry-point\n\nexport {clearTranslations, loadTranslations} from './src/translate';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// DO NOT ADD public exports to this file.\n// The public API exports are specified in the `./localize` module, which is checked by the\n// public_api_guard rules\n\nexport * from './localize';"],"names":["translate","_translate"],"mappings":"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"}