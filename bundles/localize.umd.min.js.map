{"version":3,"sources":["packages/localize/localize.umd.js"],"names":["global","factory","exports","module","define","amd","self","ng","localize","this","PLACEHOLDER_NAME_MARKER","translate$1","messageParts","substitutions","translate","translations","message","parseMessage","expressions","replacements","translationKey","i","length","messagePart","expression","raw","charAt","endOfPlaceholderName","indexOf","placeholderName","substring","translation","undefined","placeholderNames","map","placeholder","$localize","TRANSLATIONS","clearTranslations","loadTranslations","Object","keys","forEach","key","parseTranslation","parts","split","push","cooked","rawMessageParts","part","defineProperty","value"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,SACrD,mBAAXE,QAAyBA,OAAOC,IAAMD,OAAO,oBAAqB,CAAC,WAAYH,GAC5DA,IAAzBD,EAASA,GAAUM,MAAsBC,GAAKP,EAAOO,IAAM,GAAIP,EAAOO,GAAGC,SAAW,KAHzF,CAIEC,KAAM,SAAUP,GAAW;;;;;;;OAmBzB,IAAIQ,EAA0B;;;;;;;OA0I9B,SAASC,EAAYC,EAAcC;;;;;;;;AAC/B,OA7EJ,SAASC,EAAUC,EAAcH,EAAcC,GAC3C,IAAIG,EAjDR,SAASC,EAAaL,EAAcM,GAGhC,IAFA,IAAIC,EAAe,GACfC,EAAiBR,EAAa,GACzBS,EAAI,EAAGA,EAAIT,EAAaU,OAAQD,IAAK,CAC1C,IAAIE,EAAcX,EAAaS,GAC3BG,EAAaN,EAAYG,EAAI,GAQjC,IAAKT,EAAaa,IAAIJ,IAAME,GAAaG,OAAO,KAAOhB,EAAyB,CAC5E,IAAIiB,EAAuBJ,EAAYK,QAAQlB,EAAyB,GAExEU,GAAkB,MADdS,EAAkBN,EAAYO,UAAU,EAAGH,IACJ,IAAMJ,EAAYO,UAAUH,EAAuB,GAC9FR,EAAaU,GAAmBL,MAE/B,CACD,IAAIK,EACJT,GAAkB,MADdS,EAAkB,MAAQR,GACa,IAAME,EACjDJ,EAAaU,GAAmBL,GAGxC,MAAO,CAAEJ,eAAgBA,EAAgBP,cAAeM,GAwB1CF,CAAaL,EAAcC,GACrCkB,EAAchB,EAAaC,EAAQI,gBACvC,YAAoBY,IAAhBD,EACO,CACHA,EAAYnB,aACZmB,EAAYE,iBAAiBC,IAAI,SAAUC,GAAe,OAAOnB,EAAQH,cAAcsB,MAIpF,CAACvB,EAAcC,GAmEnBC,CAAUsB,UAAUC,aAAczB,EAAcC;;;;;;;;;;;;;;OAmB3DX,EAAQoC,kBA5BR,SAASA,IACLF,UAAUC,aAAe,IA4B7BnC,EAAQqC,iBA9CR,SAASA,EAAiBxB,GAEjBqB,UAAUtB,YACXsB,UAAUtB,UAAYH,GAErByB,UAAUC,eACXD,UAAUC,aAAe,IAE7BG,OAAOC,KAAK1B,GAAc2B,QAAQ,SAAUC,GACxCP,UAAUC,aAAaM,GAvC/B,SAASC,EAAiB5B,GAItB,IAHA,IAAI6B,EAAQ7B,EAAQ8B,MAAM,eACtBlC,EAAe,CAACiC,EAAM,IACtBZ,EAAmB,GACdZ,EAAI,EAAGA,EAAIwB,EAAMvB,OAAS,EAAGD,GAAK,EACvCY,EAAiBc,KAAKF,EAAMxB,IAC5BT,EAAamC,KAAK,GAAKF,EAAMxB,EAAI,IAErC,IASwB2B,EAAQvB,EAT5BwB,EAAkBrC,EAAasB,IAAI,SAAUgB,GAAQ,OAAOA,EAAKxB,OAAO,KAAOhB,EAA0B,KAAOwC,EAAOA,IAC3H,MAAO,CAAEtC,cAQeoC,EARkBpC,EAQVa,EARwBwB,EASxDT,OAAOW,eAAeH,EAAQ,MAAO,CAAEI,MAAO3B,IACvCuB,GAVmEf,iBAAkBA,GA8B1DW,CAAiB7B,EAAa4B,OAuCpEH,OAAOW,eAAejD,EAAS,aAAc,CAAEkD,OAAO","sourcesContent":["/**\n * @license Angular v9.0.0-next.6+50.sha-be13e8b.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define('@angular/localize', ['exports'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.localize = {})));\n}(this, function (exports) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The character used to mark the start and end of a placeholder name in a `$localize` tagged\n     * string.\n     *\n     * For example:\n     *\n     * ```\n     * $localize`Hello, ${title}:title:!`;\n     * ```\n     */\n    var PLACEHOLDER_NAME_MARKER = ':';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Parse a `$localize` tagged string into a structure that can be used for translation.\n     *\n     * See `ParsedMessage` for an example.\n     */\n    function parseMessage(messageParts, expressions) {\n        var replacements = {};\n        var translationKey = messageParts[0];\n        for (var i = 1; i < messageParts.length; i++) {\n            var messagePart = messageParts[i];\n            var expression = expressions[i - 1];\n            // There is a problem with synthesizing template literals in TS.\n            // It is not possible to provide raw values for the `messageParts` and TS is not able to compute\n            // them since this requires access to the string in its original (non-existent) source code.\n            // Therefore we fall back on the non-raw version if the raw string is empty.\n            // This should be OK because synthesized nodes only come from the template compiler and they\n            // will always contain placeholder name information.\n            // So there will be no escaped placeholder marker character (`:`) directly after a substitution.\n            if ((messageParts.raw[i] || messagePart).charAt(0) === PLACEHOLDER_NAME_MARKER) {\n                var endOfPlaceholderName = messagePart.indexOf(PLACEHOLDER_NAME_MARKER, 1);\n                var placeholderName = messagePart.substring(1, endOfPlaceholderName);\n                translationKey += \"{$\" + placeholderName + \"}\" + messagePart.substring(endOfPlaceholderName + 1);\n                replacements[placeholderName] = expression;\n            }\n            else {\n                var placeholderName = \"ph_\" + i;\n                translationKey += \"{$\" + placeholderName + \"}\" + messagePart;\n                replacements[placeholderName] = expression;\n            }\n        }\n        return { translationKey: translationKey, substitutions: replacements };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\n     * `substitutions`) using the given `translations`.\n     *\n     * The tagged-string is parsed to extract its `translationKey` which is used to find an appropriate\n     * `ParsedTranslation`.\n     *\n     * If one is found then it is used to translate the message into a new set of `messageParts` and\n     * `substitutions`.\n     * The translation may reorder (or remove) substitutions as appropriate.\n     *\n     * If no translation matches then the original `messageParts` and `substitutions` are returned\n     */\n    function translate(translations, messageParts, substitutions) {\n        var message = parseMessage(messageParts, substitutions);\n        var translation = translations[message.translationKey];\n        if (translation !== undefined) {\n            return [\n                translation.messageParts,\n                translation.placeholderNames.map(function (placeholder) { return message.substitutions[placeholder]; })\n            ];\n        }\n        else {\n            return [messageParts, substitutions];\n        }\n    }\n    /**\n     * Parse the `messageParts` and `placeholderNames` out of a target `message`.\n     *\n     * Used by `loadTranslations()` to convert target message strings into a structure that is more\n     * appropriate for doing translation.\n     *\n     * @param message the message to be parsed.\n     */\n    function parseTranslation(message) {\n        var parts = message.split(/{\\$([^}]*)}/);\n        var messageParts = [parts[0]];\n        var placeholderNames = [];\n        for (var i = 1; i < parts.length - 1; i += 2) {\n            placeholderNames.push(parts[i]);\n            messageParts.push(\"\" + parts[i + 1]);\n        }\n        var rawMessageParts = messageParts.map(function (part) { return part.charAt(0) === PLACEHOLDER_NAME_MARKER ? '\\\\' + part : part; });\n        return { messageParts: makeTemplateObject(messageParts, rawMessageParts), placeholderNames: placeholderNames };\n    }\n    /**\n     * Create the specialized array that is passed to tagged-string tag functions.\n     *\n     * @param cooked The message parts with their escape codes processed.\n     * @param raw The message parts with their escaped codes as-is.\n     */\n    function makeTemplateObject(cooked, raw) {\n        Object.defineProperty(cooked, 'raw', { value: raw });\n        return cooked;\n    }\n\n    /**\n     * Load translations for `$localize`.\n     *\n     * The given `translations` are processed and added to a lookup based on their translation key.\n     * A new translation will overwrite a previous translation if it has the same key.\n     *\n     * @publicApi\n     */\n    function loadTranslations(translations) {\n        // Ensure the translate function exists\n        if (!$localize.translate) {\n            $localize.translate = translate$1;\n        }\n        if (!$localize.TRANSLATIONS) {\n            $localize.TRANSLATIONS = {};\n        }\n        Object.keys(translations).forEach(function (key) {\n            $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\n        });\n    }\n    /**\n     * Remove all translations for `$localize`.\n     *\n     * @publicApi\n     */\n    function clearTranslations() {\n        $localize.TRANSLATIONS = {};\n    }\n    /**\n     * Translate the text of the given message, using the loaded translations.\n     *\n     * This function may reorder (or remove) substitutions as indicated in the matching translation.\n     */\n    function translate$1(messageParts, substitutions) {\n        return translate($localize.TRANSLATIONS, messageParts, substitutions);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.clearTranslations = clearTranslations;\n    exports.loadTranslations = loadTranslations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=localize.umd.js.map\n"]}