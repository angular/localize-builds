{"version":3,"sources":["packages/localize/localize.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","localize","compiler","this","BLOCK_MARKER","MEANING_SEPARATOR","ID_SEPARATOR","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","splitBlock","cooked","raw","charAt","text","endOfBlock","indexOf","block","substring","translate$1","messageParts","substitutions","translate","translations","message","parseMessage","expressions","index","metadata","parseMetadata","_a","undefined","meaning","description","id","_b","split","_c","messageString","length","placeholderName","messageId","computeMsgId","translation","placeholderNames","map","placeholder","Error","$localize","TRANSLATIONS","console","warn","clearTranslations","loadTranslations","Object","keys","forEach","key","parseTranslation","parts","rawMessageParts","part","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v9.0.0-next.8+44.sha-5d5c94d.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/localize', ['exports', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.localize = {}), global.ng.compiler));\n}(this, function (exports, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The character used to mark the start and end of a \"block\" in a `$localize` tagged string.\n     * A block can indicate metadata about the message or specify a name of a placeholder for a\n     * substitution expressions.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize`Hello, ${title}:title:!`;\n     * $localize`:meaning|description@@id:source message text`;\n     * ```\n     */\n    var BLOCK_MARKER = ':';\n    /**\n     * The marker used to separate a message's \"meaning\" from its \"description\" in a metadata block.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize `:correct|Indicates that the user got the answer correct: Right!`;\n     * $localize `:movement|Button label for moving to the right: Right!`;\n     * ```\n     */\n    var MEANING_SEPARATOR = '|';\n    /**\n     * The marker used to separate a message's custom \"id\" from its \"description\" in a metadata block.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize `:A welcome message on the home page@@myApp-homepage-welcome: Welcome!`;\n     * ```\n     */\n    var ID_SEPARATOR = '@@';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * Parse a `$localize` tagged string into a structure that can be used for translation.\n     *\n     * See `ParsedMessage` for an example.\n     */\n    function parseMessage(messageParts, expressions) {\n        var substitutions = {};\n        var metadata = parseMetadata(messageParts[0], messageParts.raw[0]);\n        var messageString = metadata.text;\n        for (var i = 1; i < messageParts.length; i++) {\n            var _a = splitBlock(messageParts[i], messageParts.raw[i]), messagePart = _a.text, _b = _a.block, placeholderName = _b === void 0 ? computePlaceholderName(i) : _b;\n            messageString += \"{$\" + placeholderName + \"}\" + messagePart;\n            if (expressions !== undefined) {\n                substitutions[placeholderName] = expressions[i - 1];\n            }\n        }\n        return {\n            messageId: metadata.id || compiler.computeMsgId(messageString, metadata.meaning || ''),\n            substitutions: substitutions,\n            messageString: messageString,\n        };\n    }\n    /**\n     * Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.\n     *\n     * If the message part has a metadata block this function will extract the `meaning`,\n     * `description` and `id` (if provided) from the block. These metadata properties are serialized in\n     * the string delimited by `|` and `@@` respectively.\n     *\n     * For example:\n     *\n     * ```ts\n     * `:meaning|description@@id`\n     * `:meaning|@@id`\n     * `:meaning|description`\n     * `description@@id`\n     * `meaning|`\n     * `description`\n     * `@@id`\n     * ```\n     *\n     * @param cooked The cooked version of the message part to parse.\n     * @param raw The raw version of the message part to parse.\n     * @returns A object containing any metadata that was parsed from the message part.\n     */\n    function parseMetadata(cooked, raw) {\n        var _a = splitBlock(cooked, raw), text = _a.text, block = _a.block;\n        if (block === undefined) {\n            return { text: text, meaning: undefined, description: undefined, id: undefined };\n        }\n        else {\n            var _b = __read(block.split(ID_SEPARATOR, 2), 2), meaningAndDesc = _b[0], id = _b[1];\n            var _c = __read(meaningAndDesc.split(MEANING_SEPARATOR, 2), 2), meaning = _c[0], description = _c[1];\n            if (description === undefined) {\n                description = meaning;\n                meaning = undefined;\n            }\n            if (description === '') {\n                description = undefined;\n            }\n            return { text: text, meaning: meaning, description: description, id: id };\n        }\n    }\n    /**\n     * Split a message part (`cooked` + `raw`) into an optional delimited \"block\" off the front and the\n     * rest of the text of the message part.\n     *\n     * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the\n     * start and end of the block.\n     *\n     * If the block is in the first message part then it will be metadata about the whole message:\n     * meaning, description, id.  Otherwise it will be metadata about the immediately preceding\n     * substitution: placeholder name.\n     *\n     * Since blocks are optional, it is possible that the content of a message block actually starts\n     * with a block marker. In this case the marker must be escaped `\\:`.\n     *\n     * @param cooked The cooked version of the message part to parse.\n     * @param raw The raw version of the message part to parse.\n     * @returns An object containing the `text` of the message part and the text of the `block`, if it\n     * exists.\n     */\n    function splitBlock(cooked, raw) {\n        // Synthesizing AST nodes that represent template literals using the TypeScript API is problematic\n        // because it doesn't allow for the raw value of messageParts to be programmatically set.\n        // The result is that synthesized AST nodes have empty `raw` values.\n        // Normally we rely upon checking the `raw` value to check whether the `BLOCK_MARKER` was escaped\n        // in the original source. If the `raw` value is missing then we cannot do this.\n        // In such a case we fall back on the `cooked` version and assume that the `BLOCK_MARKER` was not\n        // escaped.\n        // This should be OK because synthesized nodes only come from the Angular template compiler, which\n        // always provides full id and placeholder name information so it will never escape `BLOCK_MARKER`\n        // characters.\n        if ((raw || cooked).charAt(0) !== BLOCK_MARKER) {\n            return { text: cooked };\n        }\n        else {\n            var endOfBlock = cooked.indexOf(BLOCK_MARKER, 1);\n            return {\n                block: cooked.substring(1, endOfBlock),\n                text: cooked.substring(endOfBlock + 1),\n            };\n        }\n    }\n    function computePlaceholderName(index) {\n        return index === 1 ? 'PH' : \"PH_\" + (index - 1);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\n     * `substitutions`) using the given `translations`.\n     *\n     * The tagged-string is parsed to extract its `messageId` which is used to find an appropriate\n     * `ParsedTranslation`.\n     *\n     * If one is found then it is used to translate the message into a new set of `messageParts` and\n     * `substitutions`.\n     * The translation may reorder (or remove) substitutions as appropriate.\n     *\n     * If no translation matches then an error is thrown.\n     */\n    function translate(translations, messageParts, substitutions) {\n        var message = parseMessage(messageParts, substitutions);\n        var translation = translations[message.messageId];\n        if (translation !== undefined) {\n            return [\n                translation.messageParts,\n                translation.placeholderNames.map(function (placeholder) { return message.substitutions[placeholder]; })\n            ];\n        }\n        else {\n            throw new Error(\"No translation found for \\\"\" + message.messageId + \"\\\" (\\\"\" + message.messageString + \"\\\").\");\n        }\n    }\n    /**\n     * Parse the `messageParts` and `placeholderNames` out of a target `message`.\n     *\n     * Used by `loadTranslations()` to convert target message strings into a structure that is more\n     * appropriate for doing translation.\n     *\n     * @param message the message to be parsed.\n     */\n    function parseTranslation(message) {\n        var parts = message.split(/{\\$([^}]*)}/);\n        var messageParts = [parts[0]];\n        var placeholderNames = [];\n        for (var i = 1; i < parts.length - 1; i += 2) {\n            placeholderNames.push(parts[i]);\n            messageParts.push(\"\" + parts[i + 1]);\n        }\n        var rawMessageParts = messageParts.map(function (part) { return part.charAt(0) === BLOCK_MARKER ? '\\\\' + part : part; });\n        return { messageParts: makeTemplateObject(messageParts, rawMessageParts), placeholderNames: placeholderNames };\n    }\n    /**\n     * Create the specialized array that is passed to tagged-string tag functions.\n     *\n     * @param cooked The message parts with their escape codes processed.\n     * @param raw The message parts with their escaped codes as-is.\n     */\n    function makeTemplateObject(cooked, raw) {\n        Object.defineProperty(cooked, 'raw', { value: raw });\n        return cooked;\n    }\n\n    /**\n     * Load translations for `$localize`.\n     *\n     * The given `translations` are processed and added to a lookup based on their `MessageId`.\n     * A new translation will overwrite a previous translation if it has the same `MessageId`.\n     *\n     * * If a message is generated by the Angular compiler from an `i18n` marker in a template, the\n     *   `MessageId` is passed through to the `$localize` call as a custom `MessageId`. The `MessageId`\n     *   will match what is extracted into translation files.\n     *\n     * * If the translation is from a call to `$localize` in application code, and no custom `MessageId`\n     *   is provided, then the `MessageId` can be generated by passing the tagged string message-parts\n     *   to the `parseMessage()` function (not currently public API).\n     *\n     * @publicApi\n     *\n     */\n    function loadTranslations(translations) {\n        // Ensure the translate function exists\n        if (!$localize.translate) {\n            $localize.translate = translate$1;\n        }\n        if (!$localize.TRANSLATIONS) {\n            $localize.TRANSLATIONS = {};\n        }\n        Object.keys(translations).forEach(function (key) {\n            $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\n        });\n    }\n    /**\n     * Remove all translations for `$localize`.\n     *\n     * @publicApi\n     */\n    function clearTranslations() {\n        $localize.TRANSLATIONS = {};\n    }\n    /**\n     * Translate the text of the given message, using the loaded translations.\n     *\n     * This function may reorder (or remove) substitutions as indicated in the matching translation.\n     */\n    function translate$1(messageParts, substitutions) {\n        try {\n            return translate($localize.TRANSLATIONS, messageParts, substitutions);\n        }\n        catch (e) {\n            console.warn(e.message);\n            return [messageParts, substitutions];\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.clearTranslations = clearTranslations;\n    exports.loadTranslations = loadTranslations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=localize.umd.js.map\n"]}