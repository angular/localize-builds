#!/usr/bin/env node
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { getFileSystem, NodeJSFileSystem, setFileSystem } from '@angular/compiler-cli/src/ngtsc/file_system';
import { ConsoleLogger, LogLevel } from '@angular/compiler-cli/src/ngtsc/logging';
import * as glob from 'glob';
import * as yargs from 'yargs';
import { migrateFile } from './migrate';
if (require.main === module) {
    const args = process.argv.slice(2);
    const options = yargs
        .option('r', {
        alias: 'root',
        default: '.',
        describe: 'The root path for other paths provided in these options.\n' +
            'This should either be absolute or relative to the current working directory.',
        type: 'string',
    })
        .option('f', {
        alias: 'files',
        required: true,
        describe: 'A glob pattern indicating what files to migrate. This should be relative to the root path',
        type: 'string',
    })
        .option('m', {
        alias: 'mapFile',
        required: true,
        describe: 'Path to the migration mapping file generated by `localize-extract`. This should be relative to the root path.',
        type: 'string',
    })
        .strict()
        .help()
        .parse(args);
    const fs = new NodeJSFileSystem();
    setFileSystem(fs);
    const rootPath = options.r;
    const translationFilePaths = glob.sync(options.f, { cwd: rootPath, nodir: true });
    const logger = new ConsoleLogger(LogLevel.warn);
    migrateFiles({ rootPath, translationFilePaths, mappingFilePath: options.m, logger });
    process.exit(0);
}
/** Migrates the legacy message IDs based on the passed in configuration. */
export function migrateFiles({ rootPath, translationFilePaths, mappingFilePath, logger, }) {
    const fs = getFileSystem();
    const absoluteMappingPath = fs.resolve(rootPath, mappingFilePath);
    const mapping = JSON.parse(fs.readFile(absoluteMappingPath));
    if (Object.keys(mapping).length === 0) {
        logger.warn(`Mapping file at ${absoluteMappingPath} is empty. Either there are no messages ` +
            `that need to be migrated, or the extraction step failed to find them.`);
    }
    else {
        translationFilePaths.forEach(path => {
            const absolutePath = fs.resolve(rootPath, path);
            const sourceCode = fs.readFile(absolutePath);
            fs.writeFile(absolutePath, migrateFile(sourceCode, mapping));
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2xvY2FsaXplL3NyYy90b29scy9zcmMvbWlncmF0ZS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBQzNHLE9BQU8sRUFBQyxhQUFhLEVBQVUsUUFBUSxFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDeEYsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFDLFdBQVcsRUFBbUIsTUFBTSxXQUFXLENBQUM7QUFFeEQsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtJQUMzQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxNQUFNLE9BQU8sR0FDVCxLQUFLO1NBQ0EsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNYLEtBQUssRUFBRSxNQUFNO1FBQ2IsT0FBTyxFQUFFLEdBQUc7UUFDWixRQUFRLEVBQUUsNERBQTREO1lBQ2xFLDhFQUE4RTtRQUNsRixJQUFJLEVBQUUsUUFBUTtLQUNmLENBQUM7U0FDRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1gsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsSUFBSTtRQUNkLFFBQVEsRUFDSiwyRkFBMkY7UUFDL0YsSUFBSSxFQUFFLFFBQVE7S0FDZixDQUFDO1NBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNYLEtBQUssRUFBRSxTQUFTO1FBQ2hCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsUUFBUSxFQUNKLCtHQUErRztRQUNuSCxJQUFJLEVBQUUsUUFBUTtLQUNmLENBQUM7U0FDRCxNQUFNLEVBQUU7U0FDUixJQUFJLEVBQUU7U0FDTixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckIsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUNoRixNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEQsWUFBWSxDQUFDLEVBQUMsUUFBUSxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDbkYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQjtBQW1CRCw0RUFBNEU7QUFDNUUsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUMzQixRQUFRLEVBQ1Isb0JBQW9CLEVBQ3BCLGVBQWUsRUFDZixNQUFNLEdBQ2M7SUFDcEIsTUFBTSxFQUFFLEdBQUcsYUFBYSxFQUFFLENBQUM7SUFDM0IsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNsRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBcUIsQ0FBQztJQUVqRixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNyQyxNQUFNLENBQUMsSUFBSSxDQUNQLG1CQUFtQixtQkFBbUIsMENBQTBDO1lBQ2hGLHVFQUF1RSxDQUFDLENBQUM7S0FDOUU7U0FBTTtRQUNMLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtnZXRGaWxlU3lzdGVtLCBOb2RlSlNGaWxlU3lzdGVtLCBzZXRGaWxlU3lzdGVtfSBmcm9tICdAYW5ndWxhci9jb21waWxlci1jbGkvc3JjL25ndHNjL2ZpbGVfc3lzdGVtJztcbmltcG9ydCB7Q29uc29sZUxvZ2dlciwgTG9nZ2VyLCBMb2dMZXZlbH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9sb2dnaW5nJztcbmltcG9ydCAqIGFzIGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQge21pZ3JhdGVGaWxlLCBNaWdyYXRpb25NYXBwaW5nfSBmcm9tICcuL21pZ3JhdGUnO1xuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgY29uc3Qgb3B0aW9ucyA9XG4gICAgICB5YXJnc1xuICAgICAgICAgIC5vcHRpb24oJ3InLCB7XG4gICAgICAgICAgICBhbGlhczogJ3Jvb3QnLFxuICAgICAgICAgICAgZGVmYXVsdDogJy4nLFxuICAgICAgICAgICAgZGVzY3JpYmU6ICdUaGUgcm9vdCBwYXRoIGZvciBvdGhlciBwYXRocyBwcm92aWRlZCBpbiB0aGVzZSBvcHRpb25zLlxcbicgK1xuICAgICAgICAgICAgICAgICdUaGlzIHNob3VsZCBlaXRoZXIgYmUgYWJzb2x1dGUgb3IgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuJyxcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9wdGlvbignZicsIHtcbiAgICAgICAgICAgIGFsaWFzOiAnZmlsZXMnLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAgICAgICAnQSBnbG9iIHBhdHRlcm4gaW5kaWNhdGluZyB3aGF0IGZpbGVzIHRvIG1pZ3JhdGUuIFRoaXMgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSByb290IHBhdGgnLFxuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub3B0aW9uKCdtJywge1xuICAgICAgICAgICAgYWxpYXM6ICdtYXBGaWxlJyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgICAgICAgJ1BhdGggdG8gdGhlIG1pZ3JhdGlvbiBtYXBwaW5nIGZpbGUgZ2VuZXJhdGVkIGJ5IGBsb2NhbGl6ZS1leHRyYWN0YC4gVGhpcyBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHJvb3QgcGF0aC4nLFxuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3RyaWN0KClcbiAgICAgICAgICAuaGVscCgpXG4gICAgICAgICAgLnBhcnNlKGFyZ3MpO1xuXG4gIGNvbnN0IGZzID0gbmV3IE5vZGVKU0ZpbGVTeXN0ZW0oKTtcbiAgc2V0RmlsZVN5c3RlbShmcyk7XG5cbiAgY29uc3Qgcm9vdFBhdGggPSBvcHRpb25zLnI7XG4gIGNvbnN0IHRyYW5zbGF0aW9uRmlsZVBhdGhzID0gZ2xvYi5zeW5jKG9wdGlvbnMuZiwge2N3ZDogcm9vdFBhdGgsIG5vZGlyOiB0cnVlfSk7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKExvZ0xldmVsLndhcm4pO1xuXG4gIG1pZ3JhdGVGaWxlcyh7cm9vdFBhdGgsIHRyYW5zbGF0aW9uRmlsZVBhdGhzLCBtYXBwaW5nRmlsZVBhdGg6IG9wdGlvbnMubSwgbG9nZ2VyfSk7XG4gIHByb2Nlc3MuZXhpdCgwKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaWdyYXRlRmlsZXNPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBiYXNlIHBhdGggZm9yIG90aGVyIHBhdGhzIHByb3ZpZGVkIGluIHRoZXNlIG9wdGlvbnMuXG4gICAqIFRoaXMgc2hvdWxkIGVpdGhlciBiZSBhYnNvbHV0ZSBvciByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cbiAgICovXG4gIHJvb3RQYXRoOiBzdHJpbmc7XG5cbiAgLyoqIFBhdGhzIHRvIHRoZSBmaWxlcyB0aGF0IHNob3VsZCBiZSBtaWdyYXRlZC4gU2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBgcm9vdFBhdGhgLiAqL1xuICB0cmFuc2xhdGlvbkZpbGVQYXRoczogc3RyaW5nW107XG5cbiAgLyoqIFBhdGggdG8gdGhlIGZpbGUgY29udGFpbmluZyB0aGUgbWVzc2FnZSBJRCBtYXBwaW5ncy4gU2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBgcm9vdFBhdGhgLiAqL1xuICBtYXBwaW5nRmlsZVBhdGg6IHN0cmluZztcblxuICAvKiogTG9nZ2VyIHRvIHVzZSBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cbiAgbG9nZ2VyOiBMb2dnZXI7XG59XG5cbi8qKiBNaWdyYXRlcyB0aGUgbGVnYWN5IG1lc3NhZ2UgSURzIGJhc2VkIG9uIHRoZSBwYXNzZWQgaW4gY29uZmlndXJhdGlvbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWdyYXRlRmlsZXMoe1xuICByb290UGF0aCxcbiAgdHJhbnNsYXRpb25GaWxlUGF0aHMsXG4gIG1hcHBpbmdGaWxlUGF0aCxcbiAgbG9nZ2VyLFxufTogTWlncmF0ZUZpbGVzT3B0aW9ucykge1xuICBjb25zdCBmcyA9IGdldEZpbGVTeXN0ZW0oKTtcbiAgY29uc3QgYWJzb2x1dGVNYXBwaW5nUGF0aCA9IGZzLnJlc29sdmUocm9vdFBhdGgsIG1hcHBpbmdGaWxlUGF0aCk7XG4gIGNvbnN0IG1hcHBpbmcgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlKGFic29sdXRlTWFwcGluZ1BhdGgpKSBhcyBNaWdyYXRpb25NYXBwaW5nO1xuXG4gIGlmIChPYmplY3Qua2V5cyhtYXBwaW5nKS5sZW5ndGggPT09IDApIHtcbiAgICBsb2dnZXIud2FybihcbiAgICAgICAgYE1hcHBpbmcgZmlsZSBhdCAke2Fic29sdXRlTWFwcGluZ1BhdGh9IGlzIGVtcHR5LiBFaXRoZXIgdGhlcmUgYXJlIG5vIG1lc3NhZ2VzIGAgK1xuICAgICAgICBgdGhhdCBuZWVkIHRvIGJlIG1pZ3JhdGVkLCBvciB0aGUgZXh0cmFjdGlvbiBzdGVwIGZhaWxlZCB0byBmaW5kIHRoZW0uYCk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNsYXRpb25GaWxlUGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICAgIGNvbnN0IGFic29sdXRlUGF0aCA9IGZzLnJlc29sdmUocm9vdFBhdGgsIHBhdGgpO1xuICAgICAgY29uc3Qgc291cmNlQ29kZSA9IGZzLnJlYWRGaWxlKGFic29sdXRlUGF0aCk7XG4gICAgICBmcy53cml0ZUZpbGUoYWJzb2x1dGVQYXRoLCBtaWdyYXRlRmlsZShzb3VyY2VDb2RlLCBtYXBwaW5nKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==