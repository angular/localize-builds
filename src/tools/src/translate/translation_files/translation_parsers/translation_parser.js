(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/localize/src/tools/src/translate/translation_files/translation_parsers/translation_parser", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb25fcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbG9jYWxpemUvc3JjL3Rvb2xzL3NyYy90cmFuc2xhdGUvdHJhbnNsYXRpb25fZmlsZXMvdHJhbnNsYXRpb25fcGFyc2Vycy90cmFuc2xhdGlvbl9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7ybVNZXNzYWdlSWQsIMm1UGFyc2VkVHJhbnNsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2xvY2FsaXplL3ByaXZhdGUnO1xuaW1wb3J0IHtEaWFnbm9zdGljc30gZnJvbSAnLi4vLi4vLi4vZGlhZ25vc3RpY3MnO1xuXG4vKipcbiogQW4gb2JqZWN0IHRoYXQgaG9sZHMgdHJhbnNsYXRpb25zIHRoYXQgaGF2ZSBiZWVuIHBhcnNlZCBmcm9tIGEgdHJhbnNsYXRpb24gZmlsZS5cbiovXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFRyYW5zbGF0aW9uQnVuZGxlIHtcbiAgbG9jYWxlOiBzdHJpbmd8dW5kZWZpbmVkO1xuICB0cmFuc2xhdGlvbnM6IFJlY29yZDzJtU1lc3NhZ2VJZCwgybVQYXJzZWRUcmFuc2xhdGlvbj47XG4gIGRpYWdub3N0aWNzOiBEaWFnbm9zdGljcztcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UgdG8gcHJvdmlkZSBhIGNsYXNzIHRoYXQgY2FuIHBhcnNlIHRoZSBjb250ZW50cyBvZiBhIHRyYW5zbGF0aW9uIGZpbGUuXG4gKlxuICogVGhlIGBjYW5QYXJzZSgpYCBtZXRob2QgY2FuIHJldHVybiBhIGhpbnQgdGhhdCBjYW4gYmUgdXNlZCBieSB0aGUgYHBhcnNlKClgIG1ldGhvZCB0byBzcGVlZCB1cFxuICogcGFyc2luZy4gVGhpcyBhbGxvd3MgdGhlIHBhcnNlciB0byBkbyBzaWduaWZpY2FudCB3b3JrIHRvIGRldGVybWluZSBpZiB0aGUgZmlsZSBjYW4gYmUgcGFyc2VkXG4gKiB3aXRob3V0IGR1cGxpY2F0aW5nIHRoZSB3b3JrIHdoZW4gaXQgY29tZXMgdG8gYWN0dWFsbHkgcGFyc2luZyB0aGUgZmlsZS5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICpcbiAqIGBgYFxuICogY29uc3QgcGFyc2VyOiBUcmFuc2xhdGlvblBhcnNlciA9IGdldFBhcnNlcigpO1xuICogY29uc3QgcmVzdWx0ID0gcGFyc2VyLmNhblBhcnNlKGZpbGVQYXRoLCBjb250ZW50KTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgcmV0dXJuIHBhcnNlci5wYXJzZShmaWxlUGF0aCwgY29udGVudCwgcmVzdWx0KTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uUGFyc2VyPEhpbnQgPSB0cnVlPiB7XG4gIC8qKlxuICAgKiBDYW4gdGhpcyBwYXJzZXIgcGFyc2UgdGhlIGdpdmVuIGZpbGU/XG4gICAqXG4gICAqIEBwYXJhbSBmaWxlUGF0aCBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgdHJhbnNsYXRpb24gZmlsZS5cbiAgICogQHBhcmFtIGNvbnRlbnRzIFRoZSBjb250ZW50cyBvZiB0aGUgdHJhbnNsYXRpb24gZmlsZS5cbiAgICogQHJldHVybnMgQSBoaW50LCB3aGljaCBjYW4gYmUgdXNlZCBpbiBkb2luZyB0aGUgYWN0dWFsIHBhcnNpbmcsIGlmIHRoZSBmaWxlIGNhbiBiZSBwYXJzZWQgYnlcbiAgICogdGhpcyBwYXJzZXI7IGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGNhblBhcnNlKGZpbGVQYXRoOiBzdHJpbmcsIGNvbnRlbnRzOiBzdHJpbmcpOiBIaW50fGZhbHNlO1xuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGdpdmVuIGZpbGUsIGV4dHJhY3RpbmcgdGhlIHRhcmdldCBsb2NhbGUgYW5kIHRyYW5zbGF0aW9ucy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIHNob3VsZCBub3QgdGhyb3cgYW4gZXJyb3IuIENoZWNrIHRoZSBgYnVuZGxlLmRpYWdub3N0aWNzYCBwcm9wZXJ0eSBmb3JcbiAgICogcG90ZW50aWFsIHBhcnNpbmcgZXJyb3JzIGFuZCB3YXJuaW5ncy5cbiAgICpcbiAgICogQHBhcmFtIGZpbGVQYXRoIFRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSB0cmFuc2xhdGlvbiBmaWxlLlxuICAgKiBAcGFyYW0gY29udGVudHMgVGhlIGNvbnRlbnRzIG9mIHRoZSB0cmFuc2xhdGlvbiBmaWxlLlxuICAgKiBAcGFyYW0gaGludCBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYnkgdGhlIHBhcnNlciB0byBzcGVlZCB1cCBwYXJzaW5nIG9mIHRoZSBmaWxlLiBUaGlzIHdpbGxcbiAgICogaGF2ZSBiZWVuIHByb3ZpZGVkIGFzIHRoZSByZXR1cm4gcmVzdWx0IGZyb20gY2FsbGluZyBgY2FuUGFyc2UoKWAuXG4gICAqIEByZXR1cm5zIFRoZSB0cmFuc2xhdGlvbiBidW5kbGUgcGFyc2VkIGZyb20gdGhlIGZpbGUuXG4gICAqIEB0aHJvd3MgTm8gZXJyb3JzLiBJZiB0aGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggcGFyc2luZyB0aGUgYnVuZGxlIHdpbGwgY29udGFpbiBlcnJvcnNcbiAgICogaW4gdGhlIGBkaWFnbm9zdGljc2AgcHJvcGVydHkuXG4gICAqL1xuICBwYXJzZShmaWxlUGF0aDogc3RyaW5nLCBjb250ZW50czogc3RyaW5nLCBoaW50OiBIaW50KTogUGFyc2VkVHJhbnNsYXRpb25CdW5kbGU7XG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGdpdmVuIGZpbGUsIGV4dHJhY3RpbmcgdGhlIHRhcmdldCBsb2NhbGUgYW5kIHRyYW5zbGF0aW9ucy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhpcyBvdmVybG9hZCBpcyBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBHb2luZyBmb3J3YXJkIHVzZSB0aGUgSGludFxuICAgKiByZXR1cm5lZCBmcm9tIGBjYW5QYXJzZSgpYCBzbyB0aGF0IHRoaXMgbWV0aG9kIGNhbiBhdm9pZCBkdXBsaWNhdGluZyBlZmZvcnQuXG4gICAqXG4gICAqIEBwYXJhbSBmaWxlUGF0aCBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgdHJhbnNsYXRpb24gZmlsZS5cbiAgICogQHBhcmFtIGNvbnRlbnRzIFRoZSBjb250ZW50cyBvZiB0aGUgdHJhbnNsYXRpb24gZmlsZS5cbiAgICogQHJldHVybnMgVGhlIHRyYW5zbGF0aW9uIGJ1bmRsZSBwYXJzZWQgZnJvbSB0aGUgZmlsZS5cbiAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGVyZSB3YXMgYSBwcm9ibGVtIHBhcnNpbmcgdGhpcyBmaWxlLlxuICAgKi9cbiAgcGFyc2UoZmlsZVBhdGg6IHN0cmluZywgY29udGVudHM6IHN0cmluZyk6IFBhcnNlZFRyYW5zbGF0aW9uQnVuZGxlO1xufVxuIl19