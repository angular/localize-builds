/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ɵmakeParsedTranslation } from '@angular/localize';
/**
 * A message renderer that outputs `ɵParsedTranslation` objects.
 */
export class TargetMessageRenderer {
    constructor() {
        this.current = { messageParts: [], placeholderNames: [], text: '' };
        this.icuDepth = 0;
    }
    get message() {
        const { messageParts, placeholderNames } = this.current;
        return ɵmakeParsedTranslation(messageParts, placeholderNames);
    }
    startRender() { }
    endRender() {
        this.storeMessagePart();
    }
    text(text) {
        this.current.text += text;
    }
    placeholder(name, body) {
        this.renderPlaceholder(name);
    }
    startPlaceholder(name) {
        this.renderPlaceholder(name);
    }
    closePlaceholder(name) {
        this.renderPlaceholder(name);
    }
    startContainer() { }
    closeContainer() { }
    startIcu() {
        this.icuDepth++;
        this.text('{');
    }
    endIcu() {
        this.icuDepth--;
        this.text('}');
    }
    normalizePlaceholderName(name) {
        return name.replace(/-/g, '_');
    }
    renderPlaceholder(name) {
        name = this.normalizePlaceholderName(name);
        if (this.icuDepth > 0) {
            this.text(`{${name}}`);
        }
        else {
            this.storeMessagePart();
            this.current.placeholderNames.push(name);
        }
    }
    storeMessagePart() {
        this.current.messageParts.push(this.current.text);
        this.current.text = '';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0X21lc3NhZ2VfcmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9sb2NhbGl6ZS9zcmMvdG9vbHMvc3JjL3RyYW5zbGF0ZS90cmFuc2xhdGlvbl9maWxlcy9tZXNzYWdlX3NlcmlhbGl6YXRpb24vdGFyZ2V0X21lc3NhZ2VfcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLHNCQUFzQixFQUFxQixNQUFNLG1CQUFtQixDQUFDO0FBSTdFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUFsQztRQUNVLFlBQU8sR0FBZ0IsRUFBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDLENBQUM7UUFDMUUsYUFBUSxHQUFHLENBQUMsQ0FBQztJQWdEdkIsQ0FBQztJQTlDQyxJQUFJLE9BQU87UUFDVCxNQUFNLEVBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0RCxPQUFPLHNCQUFzQixDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxXQUFXLEtBQVUsQ0FBQztJQUN0QixTQUFTO1FBQ1AsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksQ0FBQyxJQUFZO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFDRCxXQUFXLENBQUMsSUFBWSxFQUFFLElBQXNCO1FBQzlDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsZ0JBQWdCLENBQUMsSUFBWTtRQUMzQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELGdCQUFnQixDQUFDLElBQVk7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDRCxjQUFjLEtBQVUsQ0FBQztJQUN6QixjQUFjLEtBQVUsQ0FBQztJQUN6QixRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUNELE1BQU07UUFDSixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBQ08sd0JBQXdCLENBQUMsSUFBWTtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDTyxpQkFBaUIsQ0FBQyxJQUFZO1FBQ3BDLElBQUksR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztTQUN4QjthQUFNO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBQ08sZ0JBQWdCO1FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7ybVtYWtlUGFyc2VkVHJhbnNsYXRpb24sIMm1UGFyc2VkVHJhbnNsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2xvY2FsaXplJztcblxuaW1wb3J0IHtNZXNzYWdlUmVuZGVyZXJ9IGZyb20gJy4vbWVzc2FnZV9yZW5kZXJlcic7XG5cbi8qKlxuICogQSBtZXNzYWdlIHJlbmRlcmVyIHRoYXQgb3V0cHV0cyBgybVQYXJzZWRUcmFuc2xhdGlvbmAgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRhcmdldE1lc3NhZ2VSZW5kZXJlciBpbXBsZW1lbnRzIE1lc3NhZ2VSZW5kZXJlcjzJtVBhcnNlZFRyYW5zbGF0aW9uPiB7XG4gIHByaXZhdGUgY3VycmVudDogTWVzc2FnZUluZm8gPSB7bWVzc2FnZVBhcnRzOiBbXSwgcGxhY2Vob2xkZXJOYW1lczogW10sIHRleHQ6ICcnfTtcbiAgcHJpdmF0ZSBpY3VEZXB0aCA9IDA7XG5cbiAgZ2V0IG1lc3NhZ2UoKTogybVQYXJzZWRUcmFuc2xhdGlvbiB7XG4gICAgY29uc3Qge21lc3NhZ2VQYXJ0cywgcGxhY2Vob2xkZXJOYW1lc30gPSB0aGlzLmN1cnJlbnQ7XG4gICAgcmV0dXJuIMm1bWFrZVBhcnNlZFRyYW5zbGF0aW9uKG1lc3NhZ2VQYXJ0cywgcGxhY2Vob2xkZXJOYW1lcyk7XG4gIH1cbiAgc3RhcnRSZW5kZXIoKTogdm9pZCB7fVxuICBlbmRSZW5kZXIoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZU1lc3NhZ2VQYXJ0KCk7XG4gIH1cbiAgdGV4dCh0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnQudGV4dCArPSB0ZXh0O1xuICB9XG4gIHBsYWNlaG9sZGVyKG5hbWU6IHN0cmluZywgYm9keTogc3RyaW5nfHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyUGxhY2Vob2xkZXIobmFtZSk7XG4gIH1cbiAgc3RhcnRQbGFjZWhvbGRlcihuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlclBsYWNlaG9sZGVyKG5hbWUpO1xuICB9XG4gIGNsb3NlUGxhY2Vob2xkZXIobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJQbGFjZWhvbGRlcihuYW1lKTtcbiAgfVxuICBzdGFydENvbnRhaW5lcigpOiB2b2lkIHt9XG4gIGNsb3NlQ29udGFpbmVyKCk6IHZvaWQge31cbiAgc3RhcnRJY3UoKTogdm9pZCB7XG4gICAgdGhpcy5pY3VEZXB0aCsrO1xuICAgIHRoaXMudGV4dCgneycpO1xuICB9XG4gIGVuZEljdSgpOiB2b2lkIHtcbiAgICB0aGlzLmljdURlcHRoLS07XG4gICAgdGhpcy50ZXh0KCd9Jyk7XG4gIH1cbiAgcHJpdmF0ZSBub3JtYWxpemVQbGFjZWhvbGRlck5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5hbWUucmVwbGFjZSgvLS9nLCAnXycpO1xuICB9XG4gIHByaXZhdGUgcmVuZGVyUGxhY2Vob2xkZXIobmFtZTogc3RyaW5nKSB7XG4gICAgbmFtZSA9IHRoaXMubm9ybWFsaXplUGxhY2Vob2xkZXJOYW1lKG5hbWUpO1xuICAgIGlmICh0aGlzLmljdURlcHRoID4gMCkge1xuICAgICAgdGhpcy50ZXh0KGB7JHtuYW1lfX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdG9yZU1lc3NhZ2VQYXJ0KCk7XG4gICAgICB0aGlzLmN1cnJlbnQucGxhY2Vob2xkZXJOYW1lcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIHN0b3JlTWVzc2FnZVBhcnQoKSB7XG4gICAgdGhpcy5jdXJyZW50Lm1lc3NhZ2VQYXJ0cy5wdXNoKHRoaXMuY3VycmVudC50ZXh0KTtcbiAgICB0aGlzLmN1cnJlbnQudGV4dCA9ICcnO1xuICB9XG59XG5cbmludGVyZmFjZSBNZXNzYWdlSW5mbyB7XG4gIG1lc3NhZ2VQYXJ0czogc3RyaW5nW107XG4gIHBsYWNlaG9sZGVyTmFtZXM6IHN0cmluZ1tdO1xuICB0ZXh0OiBzdHJpbmc7XG59XG4iXX0=