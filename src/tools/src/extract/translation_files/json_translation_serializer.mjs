import { consolidateMessages } from './utils';
/**
 * This is a semi-public bespoke serialization format that is used for testing and sometimes as a
 * format for storing translations that will be inlined at runtime.
 *
 * @see SimpleJsonTranslationParser
 */
export class SimpleJsonTranslationSerializer {
    constructor(sourceLocale) {
        this.sourceLocale = sourceLocale;
    }
    serialize(messages) {
        const fileObj = { locale: this.sourceLocale, translations: {} };
        for (const [message] of consolidateMessages(messages, message => message.id)) {
            fileObj.translations[message.id] = message.text;
        }
        return JSON.stringify(fileObj, null, 2);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbl90cmFuc2xhdGlvbl9zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbG9jYWxpemUvc3JjL3Rvb2xzL3NyYy9leHRyYWN0L3RyYW5zbGF0aW9uX2ZpbGVzL2pzb25fdHJhbnNsYXRpb25fc2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFRNUM7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sK0JBQStCO0lBQzFDLFlBQW9CLFlBQW9CO1FBQXBCLGlCQUFZLEdBQVosWUFBWSxDQUFRO0lBQUcsQ0FBQztJQUM1QyxTQUFTLENBQUMsUUFBMEI7UUFDbEMsTUFBTSxPQUFPLEdBQThCLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQ3pGLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM1RSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge8m1TWVzc2FnZUlkLCDJtVBhcnNlZE1lc3NhZ2UsIMm1U291cmNlTWVzc2FnZX0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xuaW1wb3J0IHtUcmFuc2xhdGlvblNlcmlhbGl6ZXJ9IGZyb20gJy4vdHJhbnNsYXRpb25fc2VyaWFsaXplcic7XG5pbXBvcnQge2NvbnNvbGlkYXRlTWVzc2FnZXN9IGZyb20gJy4vdXRpbHMnO1xuXG5cbmludGVyZmFjZSBTaW1wbGVKc29uVHJhbnNsYXRpb25GaWxlIHtcbiAgbG9jYWxlOiBzdHJpbmc7XG4gIHRyYW5zbGF0aW9uczogUmVjb3JkPMm1TWVzc2FnZUlkLCDJtVNvdXJjZU1lc3NhZ2U+O1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBzZW1pLXB1YmxpYyBiZXNwb2tlIHNlcmlhbGl6YXRpb24gZm9ybWF0IHRoYXQgaXMgdXNlZCBmb3IgdGVzdGluZyBhbmQgc29tZXRpbWVzIGFzIGFcbiAqIGZvcm1hdCBmb3Igc3RvcmluZyB0cmFuc2xhdGlvbnMgdGhhdCB3aWxsIGJlIGlubGluZWQgYXQgcnVudGltZS5cbiAqXG4gKiBAc2VlIFNpbXBsZUpzb25UcmFuc2xhdGlvblBhcnNlclxuICovXG5leHBvcnQgY2xhc3MgU2ltcGxlSnNvblRyYW5zbGF0aW9uU2VyaWFsaXplciBpbXBsZW1lbnRzIFRyYW5zbGF0aW9uU2VyaWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc291cmNlTG9jYWxlOiBzdHJpbmcpIHt9XG4gIHNlcmlhbGl6ZShtZXNzYWdlczogybVQYXJzZWRNZXNzYWdlW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGZpbGVPYmo6IFNpbXBsZUpzb25UcmFuc2xhdGlvbkZpbGUgPSB7bG9jYWxlOiB0aGlzLnNvdXJjZUxvY2FsZSwgdHJhbnNsYXRpb25zOiB7fX07XG4gICAgZm9yIChjb25zdCBbbWVzc2FnZV0gb2YgY29uc29saWRhdGVNZXNzYWdlcyhtZXNzYWdlcywgbWVzc2FnZSA9PiBtZXNzYWdlLmlkKSkge1xuICAgICAgZmlsZU9iai50cmFuc2xhdGlvbnNbbWVzc2FnZS5pZF0gPSBtZXNzYWdlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmaWxlT2JqLCBudWxsLCAyKTtcbiAgfVxufVxuIl19