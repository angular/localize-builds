import { Diagnostics } from '../diagnostics';
import { serializeLocationPosition } from '../source_file_utils';
/**
 * Check each of the given `messages` to find those that have the same id but different message
 * text. Add diagnostics messages for each of these duplicate messages to the given `diagnostics`
 * object (as necessary).
 */
export function checkDuplicateMessages(fs, messages, duplicateMessageHandling, basePath) {
    const diagnostics = new Diagnostics();
    if (duplicateMessageHandling === 'ignore')
        return diagnostics;
    const messageMap = new Map();
    for (const message of messages) {
        if (messageMap.has(message.id)) {
            messageMap.get(message.id).push(message);
        }
        else {
            messageMap.set(message.id, [message]);
        }
    }
    for (const duplicates of messageMap.values()) {
        if (duplicates.length <= 1)
            continue;
        if (duplicates.every(message => message.text === duplicates[0].text))
            continue;
        const diagnosticMessage = `Duplicate messages with id "${duplicates[0].id}":\n` +
            duplicates.map(message => serializeMessage(fs, basePath, message)).join('\n');
        diagnostics.add(duplicateMessageHandling, diagnosticMessage);
    }
    return diagnostics;
}
/**
 * Serialize the given `message` object into a string.
 */
function serializeMessage(fs, basePath, message) {
    if (message.location === undefined) {
        return `   - "${message.text}"`;
    }
    else {
        const locationFile = fs.relative(basePath, message.location.file);
        const locationPosition = serializeLocationPosition(message.location);
        return `   - "${message.text}" : ${locationFile}:${locationPosition}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVwbGljYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2xvY2FsaXplL3NyYy90b29scy9zcmMvZXh0cmFjdC9kdXBsaWNhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE9BQU8sRUFBNkIsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFL0Q7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FDbEMsRUFBb0IsRUFBRSxRQUEwQixFQUNoRCx3QkFBb0QsRUFBRSxRQUF3QjtJQUNoRixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBQ3RDLElBQUksd0JBQXdCLEtBQUssUUFBUTtRQUFFLE9BQU8sV0FBVyxDQUFDO0lBRTlELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFnQyxDQUFDO0lBQzNELEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1FBQzlCLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDOUIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO2FBQU07WUFDTCxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0Y7SUFFRCxLQUFLLE1BQU0sVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUM1QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQztZQUFFLFNBQVM7UUFDckMsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUUsU0FBUztRQUUvRSxNQUFNLGlCQUFpQixHQUFHLCtCQUErQixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNO1lBQzNFLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xGLFdBQVcsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztLQUM5RDtJQUVELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsZ0JBQWdCLENBQ3JCLEVBQW9CLEVBQUUsUUFBd0IsRUFBRSxPQUF1QjtJQUN6RSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQ2xDLE9BQU8sU0FBUyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUM7S0FDakM7U0FBTTtRQUNMLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsT0FBTyxTQUFTLE9BQU8sQ0FBQyxJQUFJLE9BQU8sWUFBWSxJQUFJLGdCQUFnQixFQUFFLENBQUM7S0FDdkU7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge0Fic29sdXRlRnNQYXRoLCBQYXRoTWFuaXB1bGF0aW9ufSBmcm9tICdAYW5ndWxhci9jb21waWxlci1jbGkvc3JjL25ndHNjL2ZpbGVfc3lzdGVtJztcbmltcG9ydCB7ybVNZXNzYWdlSWQsIMm1UGFyc2VkTWVzc2FnZX0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xuXG5pbXBvcnQge0RpYWdub3N0aWNIYW5kbGluZ1N0cmF0ZWd5LCBEaWFnbm9zdGljc30gZnJvbSAnLi4vZGlhZ25vc3RpY3MnO1xuaW1wb3J0IHtzZXJpYWxpemVMb2NhdGlvblBvc2l0aW9ufSBmcm9tICcuLi9zb3VyY2VfZmlsZV91dGlscyc7XG5cbi8qKlxuICogQ2hlY2sgZWFjaCBvZiB0aGUgZ2l2ZW4gYG1lc3NhZ2VzYCB0byBmaW5kIHRob3NlIHRoYXQgaGF2ZSB0aGUgc2FtZSBpZCBidXQgZGlmZmVyZW50IG1lc3NhZ2VcbiAqIHRleHQuIEFkZCBkaWFnbm9zdGljcyBtZXNzYWdlcyBmb3IgZWFjaCBvZiB0aGVzZSBkdXBsaWNhdGUgbWVzc2FnZXMgdG8gdGhlIGdpdmVuIGBkaWFnbm9zdGljc2BcbiAqIG9iamVjdCAoYXMgbmVjZXNzYXJ5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlTWVzc2FnZXMoXG4gICAgZnM6IFBhdGhNYW5pcHVsYXRpb24sIG1lc3NhZ2VzOiDJtVBhcnNlZE1lc3NhZ2VbXSxcbiAgICBkdXBsaWNhdGVNZXNzYWdlSGFuZGxpbmc6IERpYWdub3N0aWNIYW5kbGluZ1N0cmF0ZWd5LCBiYXNlUGF0aDogQWJzb2x1dGVGc1BhdGgpOiBEaWFnbm9zdGljcyB7XG4gIGNvbnN0IGRpYWdub3N0aWNzID0gbmV3IERpYWdub3N0aWNzKCk7XG4gIGlmIChkdXBsaWNhdGVNZXNzYWdlSGFuZGxpbmcgPT09ICdpZ25vcmUnKSByZXR1cm4gZGlhZ25vc3RpY3M7XG5cbiAgY29uc3QgbWVzc2FnZU1hcCA9IG5ldyBNYXA8ybVNZXNzYWdlSWQsIMm1UGFyc2VkTWVzc2FnZVtdPigpO1xuICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICBpZiAobWVzc2FnZU1hcC5oYXMobWVzc2FnZS5pZCkpIHtcbiAgICAgIG1lc3NhZ2VNYXAuZ2V0KG1lc3NhZ2UuaWQpIS5wdXNoKG1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlTWFwLnNldChtZXNzYWdlLmlkLCBbbWVzc2FnZV0pO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgZHVwbGljYXRlcyBvZiBtZXNzYWdlTWFwLnZhbHVlcygpKSB7XG4gICAgaWYgKGR1cGxpY2F0ZXMubGVuZ3RoIDw9IDEpIGNvbnRpbnVlO1xuICAgIGlmIChkdXBsaWNhdGVzLmV2ZXJ5KG1lc3NhZ2UgPT4gbWVzc2FnZS50ZXh0ID09PSBkdXBsaWNhdGVzWzBdLnRleHQpKSBjb250aW51ZTtcblxuICAgIGNvbnN0IGRpYWdub3N0aWNNZXNzYWdlID0gYER1cGxpY2F0ZSBtZXNzYWdlcyB3aXRoIGlkIFwiJHtkdXBsaWNhdGVzWzBdLmlkfVwiOlxcbmAgK1xuICAgICAgICBkdXBsaWNhdGVzLm1hcChtZXNzYWdlID0+IHNlcmlhbGl6ZU1lc3NhZ2UoZnMsIGJhc2VQYXRoLCBtZXNzYWdlKSkuam9pbignXFxuJyk7XG4gICAgZGlhZ25vc3RpY3MuYWRkKGR1cGxpY2F0ZU1lc3NhZ2VIYW5kbGluZywgZGlhZ25vc3RpY01lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIGRpYWdub3N0aWNzO1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgZ2l2ZW4gYG1lc3NhZ2VgIG9iamVjdCBpbnRvIGEgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVNZXNzYWdlKFxuICAgIGZzOiBQYXRoTWFuaXB1bGF0aW9uLCBiYXNlUGF0aDogQWJzb2x1dGVGc1BhdGgsIG1lc3NhZ2U6IMm1UGFyc2VkTWVzc2FnZSk6IHN0cmluZyB7XG4gIGlmIChtZXNzYWdlLmxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYCAgIC0gXCIke21lc3NhZ2UudGV4dH1cImA7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbG9jYXRpb25GaWxlID0gZnMucmVsYXRpdmUoYmFzZVBhdGgsIG1lc3NhZ2UubG9jYXRpb24uZmlsZSk7XG4gICAgY29uc3QgbG9jYXRpb25Qb3NpdGlvbiA9IHNlcmlhbGl6ZUxvY2F0aW9uUG9zaXRpb24obWVzc2FnZS5sb2NhdGlvbik7XG4gICAgcmV0dXJuIGAgICAtIFwiJHttZXNzYWdlLnRleHR9XCIgOiAke2xvY2F0aW9uRmlsZX06JHtsb2NhdGlvblBvc2l0aW9ufWA7XG4gIH1cbn1cbiJdfQ==